AWSTemplateFormatVersion: 2010-09-09
Description: Boilerplate for a static S3 website with CloudFront and Lambda Edge.
Parameters:
  DomainName:
    Type: String
    Description: The DNS name of the website, such as example.com
  HostedZoneId:
    Type: String
    Description: The ID of the Hosted Zone of the domain name
  AcmCertificateArn:
    Type: String
    Description: The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM)
      for your domain name certificate
Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Confidentiality
          Value: Public
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Statement:
          - Principal:
              CanonicalUser: !GetAtt 'CloudFrontOriginAccessIdentity.S3CanonicalUserId'
            Action: s3:GetObject
            Effect: Allow
            Resource: !Sub '${WebsiteBucket.Arn}/*'
            Sid: 0
          - Principal:
              CanonicalUser: !GetAtt 'CloudFrontOriginAccessIdentity.S3CanonicalUserId'
            Action: s3:ListBucket
            Effect: Allow
            Resource: !GetAtt 'WebsiteBucket.Arn'
            Sid: 1
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'Access identity for ${WebsiteBucket}'
  WebsiteCloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
          - DomainName: !GetAtt 'WebsiteBucket.DomainName'
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        CacheBehaviors:
          - AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            TargetOriginId: S3Origin
            Compress: true
            DefaultTTL: 480
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            MaxTTL: 600
            MinTTL: 420
            PathPattern: /
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 503
        Aliases:
          - !Ref 'DomainName'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-response
              LambdaFunctionARN: !Ref 'SecurityHeadersFunctionVersion'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref 'AcmCertificateArn'
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
      Tags:
        - Key: Confidentiality
          Value: Public
  IPV4Record:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'WebsiteCloudfront.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Ref 'DomainName'
      Type: A
  IPV6Record:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'WebsiteCloudfront.DomainName'
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Ref 'DomainName'
      Type: AAAA
  SecurityHeadersFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt 'SecurityHeadersFunctionRole.Arn'
      Code:
        ZipFile: |
              'use strict';
              exports.handler = (event, context, callback) => {

                  //Get contents of response
                  const response = event.Records[0].cf.response;
                  const headers = response.headers;
              //Set new headers
               headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=63072000; includeSubdomains; preload'}];
               headers['content-security-policy'] = [{key: 'Content-Security-Policy', value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"}];
               headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
               headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
               headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
               headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];
               headers['feature-policy'] = [{key: 'Feature-Policy', value: 'geolocation none; midi none; notifications none; push none; sync-xhr none; microphone none; camera none; magnetometer none; gyroscope none; speaker self; vibrate none; fullscreen self; payment none;',}];

                  //Return modified response
                  callback(null, response);
              };
      Runtime: nodejs10.x
      Timeout: 5
      Tags:
        - Key: Confidentiality
          Value: Public
  SecurityHeadersFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt 'SecurityHeadersFunction.Arn'
  SecurityHeadersFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
Outputs:
  S3WebsiteUrl:
    Value: !GetAtt 'WebsiteBucket.WebsiteURL'
    Description: HTTP URL for website hosted on S3
  SecureS3WebsiteUrl:
    Value: !Sub 'https://${WebsiteBucket.DomainName}'
    Description: HTTPS URL for website hosted on S3
  SecureCloudFrontWebsiteUrl:
    Value: !Sub 'https://${WebsiteCloudfront.DomainName}'
    Description: HTTPS URL for the website through CloudFront
  SecureDomainWebsiteUrl:
    Value: !Sub 'https://${DomainName}'
    Description: HTTPS URL For the website through the provided domain name
  SecurityHeadersFunctionArn:
    Value: !GetAtt 'SecurityHeadersFunction.Arn'
    Description: Lambda ARN for the security headers function